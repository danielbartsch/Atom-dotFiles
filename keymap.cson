# Your keymap
#
# Atom keymaps work similarly to style sheets. Just as style sheets use
# selectors to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts. Unlike style sheets however,
# each selector can only be declared once.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# 'atom-text-editor':
#   'enter': 'editor:newline'
#
# 'atom-workspace':
#   'ctrl-shift-p': 'core:move-up'
#   'ctrl-p': 'core:move-down'
#
# You can find more information about keymaps in these guides:
# * http://flight-manual.atom.io/using-atom/sections/basic-customization/#_customizing_keybindings
# * http://flight-manual.atom.io/behind-atom/sections/keymaps-in-depth/
#
# If you're having trouble with your keybindings not working, try the
# Keybinding Resolver: `Cmd+.` on macOS and `Ctrl+.` on other platforms. See the
# Debugging Guide for more information:
# * http://flight-manual.atom.io/hacking-atom/sections/debugging/#check-the-keybindings
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson

'atom-text-editor':
    'ctrl-shift-x': 'es-identifier-highlight:jumpToDefinition'
    'ctrl-shift-r': 'es-identifier-highlight:renameIdentifier'
    'ctrl-shift-up': 'find-and-replace:find-previous-selected'
    'ctrl-shift-down': 'find-and-replace:find-next-selected'
    'ctrl-<': 'tree-view:toggle'
    'ctrl-numpad1': 'github:toggle-git-tab'
    'ctrl-numpad2': 'github:toggle-github-tab'

'atom-text-editor:not([mini])':
  'ctrl-shift-[': 'editor:fold-current-row'
  'ctrl-shift-]': 'editor:unfold-current-row'

'atom-workspace':
  'ctrl-shift-c': 'clipboard-history:copy'
  'ctrl-shift-v': 'clipboard-history:paste'

'.platform-linux atom-text-editor':
  'ctrl-shift-m': 'bracket-matcher:select-inside-brackets'
