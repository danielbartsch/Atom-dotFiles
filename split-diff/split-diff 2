import { Updater } from 'redux-elm'
import { REHYDRATE } from 'redux-persist/constants'
import { reducer as queryListReducer, init as queryListInit } from 'modules/queryList'
import revive from './utils/revive'
import saga from './saga'
import * as ActionTypes from './constants/ActionTypes'

// ------------------------------------
// Init
// ------------------------------------

const initialModel = {
    areEntitiesLoading: false,
    searchText: '',
    cubeColumnGroups: {},
    entities: {
        groups: {},
        metrics: {},
        dimensions: {}
    },
    queryList: queryListInit()
}

// ------------------------------------
// Reducer
// ------------------------------------

export default new Updater(initialModel, saga)

    .case(REHYDRATE, (model, { payload }) => (revive(payload)))
    .case(ActionTypes.WAITING_INDICATOR_SHOW, model => ({ ...model, areEntitiesLoading: true }))
    .case(ActionTypes.WAITING_INDICATOR_HIDE, model => ({ ...model, areEntitiesLoading: false }))
    .case(ActionTypes.ENTITIES_SUCCESS, (model, { payload: entities }) => ({
        ...model,
        entities,
        queryList: {
            ...model.queryList,
            queries: model.queryList.queries.map(query => ({
                ...query,
                projection: {
                    ...query.projection,
                    metricProjections: query.projection.metricProjections.map(metricProjection => {
                        console.log('entities success metricprojections', metricProjection)
                        return {
                            ...metricProjection,
                            defaultFractionalDigits: entities.metrics[metricProjection.cubeColumnId].fractionalDigits
                        }
                    })
                }
            }))
        }
    }))
    .case(ActionTypes.SEARCH_TERM_CHANGED, (model, { payload: term }) => (
        { ...model, searchText: term }
    ))
    .case(ActionTypes.GROUP_TOGGLE, (model, { payload: id }) => (
        {
            ...model,
            cubeColumnGroups: {
                ...model.cubeColumnGroups,
                [id]: {
                    expanded: model.cubeColumnGroups[id] ? !model.cubeColumnGroups[id].expanded : true
                }
            }
        }
    ))
    .case('QueryList', (model, action) => ({ ...model, queryList: queryListReducer(model.queryList, action) }))
.toReducer()
